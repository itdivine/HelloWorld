App2 {
  akka {
    actor {
      deployment {
        "/enterprises/*/collector/handler" {
          router = balancing-pool
          nr-of-instances = 300
        }

        "/enterprises/*/tracks/trackReportPVProcessor" {
          router = round-robin-pool
          nr-of-instances = 300
        }

        "/enterprises/*/navigations/navReportPVProsessor" {
          router = round-robin-pool
          nr-of-instances = 300
        }

        "/enterprises/*/tracks/nt/httpHandler" {
          router = round-robin-pool
          nr-of-instances = 200
        }

      }

      provider = "akka.cluster.ClusterActorRefProvider"

      serialize-backMessages = on
      serializers {
        java = "akka.serialization.JavaSerializer"
        proto = "akka.remote.serialization.ProtobufSerializer"
      }

      serialization-bindings {
        "java.lang.String" = java
        "cn.xiaoneng.skyeye.enterprise.message.EVSCommandMessage" = java
        "cn.xiaoneng.skyeye.enterprise.message.EVSDocumentMessage" = java
      }

    }

    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "127.0.0.1"
        port = 2551   #当前节点端口号
      }
    }

    akka.cluster.metrics.enabled=off

    akka.extensions=["akka.cluster.pubsub.DistributedPubSub"]

   # akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native

    akka.cluster.pub-sub {
      # Actor name of the mediator actor, /system/distributedPubSubMediator
      name = distributedPubSubMediator

      # Start the mediator on members tagged with this role.
      # All members are used if undefined or empty.
      role = ""

      # The routing logic to use for 'Send'
      # Possible values: random, round-robin, broadcast
      routing-logic = random

      # How often the DistributedPubSubMediator should send out gossip information
      gossip-interval = 1s

      # Removed entries are pruned after this duration
      removed-time-to-live = 5s

      # Maximum number of elements to transfer in one message when synchronizing the registries.
      # Next chunk will be transferred in next round of gossip.
      max-delta-elements = 3000

      # The id of the dispatcher to use for DistributedPubSubMediator actors.
      # If not specified default dispatcher is used.
      # If specified you need to define the settings of the actual dispatcher.
      use-dispatcher = ""
    }
  }
  systemName = ${systemName}
  clusterAddr ="akka.tcp://NSkyEye@"${clusterAddr}":"${clusterPort}
  appUrl=${appUrl}
  appPort=${appPort}
  appConfigFileName=${appConfigFileName}
  httpConfigFileName=${httpConfigFileName}

  neo4j_url="bolt://"${neo4j_url}
  neo4j_userName=${neo4j_userName}
  neo4j_password=${neo4j_password}
  neo4j_maxSession=${neo4j_maxSession}

  KAFKA_ServiceSize=${KAFKA_ServiceSize}
  KAFKA_BROKERS=${KAFKA_BROKERS}":"${KAFKA_BROKERS_PORT}
  KAFKA_TOPIC=${KAFKA_TOPIC}

  kpi_url="http://"${kpi_url}
}

include "akka_system.properties"